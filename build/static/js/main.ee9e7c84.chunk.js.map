{"version":3,"sources":["components/gameComps/armourSet.js","components/gameComps/playerHand.js","pages/MunchGame.js","components/startPageComps/addPlayerModal.js","pages/MunchStart.js","router/serviceWorker.js","index.js"],"names":["ArmourSet","className","style","top","left","Component","PlayerHand","Game","href","rel","AddPlayerModal","args","updatePlayerNumber","e","playerNumber","target","value","setState","prevState","state","showModal","props","title","close","nextProps","this","playerInputs","i","push","key","id","Modal","show","onHide","backdrop","Header","Body","type","onChange","min","Footer","Button","onClick","removeAnswer","Start","startGame","gamePage","handleButtonTogglePlayerModal","toggle","Content","visible","animated","hidden","Icon","name","placeholder","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee9e7c84.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../../css/munchGame.css'\n\nclass ArmourSet extends Component {\n    render() {\n        return(\n            <div>\n            <div className = \"armourSlot\" style={{top:'20%', left:'12%'}}/>\n            <div className = \"armourSlot\" style={{top:'40%', left:'12%'}}/>\n            <div className = \"armourSlot\" style={{top:'40%', left:'2%'}}/>\n            <div className = \"armourSlot\" style={{top:'40%', left:'22%'}}/>\n            <div className = \"armourSlot\" style={{top:'60%', left:'17%'}}/>\n            <div className = \"armourSlot\" style={{top:'60%', left:'7%'}}/>\n            </div>\n        );\n    }\n}\n\nexport default ArmourSet;","import React, { Component } from 'react';\nimport '../../css/playerHand.css';\n\nclass PlayerHand extends Component {\n    render() {\n        return(\n            <div>\n            <div className = \"handSizeColouring handOne\" />\n            <div className = \"handSizeColouring handTwo\" />\n            <div className = \"handSizeColouring handThree\" />\n            <div className = \"handSizeColouring handFour\" />\n            <div className = \"handSizeColouring handFive\" />\n            <div className = \"handSizeColouring handSix\" />\n            <div className = \"handSizeColouring handSeven\" />\n            </div>\n        );\n    }\n}\n\nexport default PlayerHand;","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"../css/munchGame.css\";\nimport \"../css/playerHand.css\";\nimport {} from \"semantic-ui-react\";\nimport ArmourSet from '../components/gameComps/armourSet'\nimport PlayerHand from '../components/gameComps/playerHand'\n\nfunction Game() {\n    return (\n      <div className = \"container\">\n        <head>\n          <link\n            href = \"https://fonts.googleapis.com/css?family=Almendra SC\"\n            rel = \"stylesheet\"\n          ></link>\n        </head>\n        <body className = \"gameBackground\">\n          <h1 className = \"glow inGameHeading\">Munchkin</h1>\n          <ArmourSet/>\n          <PlayerHand/>\n        </body>\n      </div>\n    );\n  }\n  \n  export default Game;","import React, { Component } from 'react';\nimport {Button} from 'react-bootstrap';\nimport Modal from 'react-bootstrap/Modal';\nimport '../../css/modalStyle.css';\n\nclass AddPlayerModal extends Component {\n    constructor(...args) {\n        super(...args);\n        this.state = {\n            showModal: this.props.showModal,\n            title: this.props.title,\n            playerNumber: 0\n        };\n        this.close = () => {\n            this.setState({ showModal: this.props.showModal });\n        };\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            showModal: nextProps.showModal\n        })\n    }\n\n    updatePlayerNumber = (e) => {\n        const playerNumber = e.target.value\n        debugger \n        if(playerNumber>4){\n            return\n        }\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                playerNumber\n            }\n        })\n    }\n  render() {\n      var playerInputs = [];\n    for (let i = 0; i< this.state.playerNumber; i++){\n        playerInputs.push(<input key={i} id={i} className=\"spawnedInput\" />)\n    };\n    return (\n      <Modal\n        show={this.state.showModal}\n        onHide={this.props.close ? this.props.close : this.close}\n        backdrop={true}\n      >\n        <br />\n        <Modal.Header>\n          <h3 className=\"modalHead\">Name your Champions!</h3>\n          <br />\n        </Modal.Header>\n        <Modal.Body className=\"modalBod\">\n          <text className=\"baseText\">Amount (Max 4) - </text>\n          <input id=\"playerNumber\" className=\"inputNumBoxModal\" type=\"number\" value={this.state.playerNumber} onChange={this.updatePlayerNumber} min=\"1\"/>\n          <div id=\"my_div\">\n          {playerInputs}\n          </div>\n        </Modal.Body>\n        <Modal.Footer className=\"modalFoot\">\n          <Button onClick={this.removeAnswer} className=\"modalConfirm\">\n            Confirm\n          </Button>\n          <br></br>\n          <Button\n            onClick={this.props.close ? this.props.close : this.close}\n            className=\"modalClose\"\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\nexport default AddPlayerModal;","import React from \"react\";\nimport Game from \"./MunchGame.js\";\nimport AddPlayerModal from '../components/startPageComps/addPlayerModal';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport \"../css/munchStart.css\";\nimport \"../css/munchGame.css\";\n\nexport default class Start extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      //this.state represent the rendered values, i.e. whatâ€™s currently on the screen\n      gamePage: false,\n    };\n  }\n\n  startGame = () => {\n    this.setState({\n      gamePage:true\n    }\n    )\n  }\n\n  handleButtonTogglePlayerModal = (toggle) => {\n\n    this.setState({\n        showModal: toggle\n    });\n}\n\n  render() {\n\n    if (this.state.gamePage === true) {\n      return (\n        <div className = \"container\">\n          <Game />\n        </div>\n      );\n    } \n    \n    else {\n      return (\n        <div className = \"container\">\n          <script>\n            <link\n              href = \"https://fonts.googleapis.com/css?family=Almendra SC\"\n              rel = \"stylesheet\"\n            ></link>\n          </script>\n          <body className = \"frontBackground\">\n            <h1 className = \"mainTitle glowpulsed\">Munchkin</h1>\n            <Button className = \"playersButt\" onClick={() => this.handleButtonTogglePlayerModal(true)}>\n                <Button.Content visible>Amount of Players</Button.Content>\n            </Button>\n            <div>\n              <Button animated className = \"startButt\" onClick={this.startGame}>\n                <Button.Content visible>Start Game</Button.Content>\n                <Button.Content hidden>\n                  <Icon name=\"bomb\" className = \"icon\" />\n                </Button.Content>\n              </Button>\n            </div>\n            <div className = \"levelButt\">\n              <input className = \"buttInput\" type = \"number\" placeholder = \"Level to Win\"></input>\n            </div>\n          </body>\n          <AddPlayerModal  title = {\"Player Names\"} showModal = {this.state.showModal} close = {() => this.handleButtonTogglePlayerModal(false)}/>\n        </div>\n      );\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/munchStart.css';\nimport Start from './pages/MunchStart.js';\nimport * as serviceWorker from './router/serviceWorker';\n\nReactDOM.render(\n  \n    <Start />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}